import numpy as np
import os
from pathlib import Path
from spear_path import get_spear_path, get_spear_paths
import subprocess
import xarray

from utils import pad_ds, write_ds


def extract_spear_atmos(ystart, mstart, ens, outdir=None):
    if outdir is None:
        tmp = Path(os.environ['TMPDIR'])
        if ens == 'pp_ensemble':
            outdir = tmp / f'{ystart}-{mstart:02d}-{ens}_raw'
        else:
            outdir = tmp / f'{ystart}-{mstart:02d}-e{ens:02d}_raw'
        outdir.mkdir(exist_ok=True)

    files = get_spear_paths(
        ['slp', 't_ref', 'u_ref', 'v_ref', 'q_ref', 'lwdn_sfc', 'swdn_sfc', 'precip'],
        ystart, mstart, 'atmos_daily', 'daily', ens=ens
    )
    file_strings = ' '.join(map(lambda x: x.as_posix(), files))
    subprocess.run(['dmget ' + file_strings], shell=True, check=True)
    subprocess.run(['gcp --sync ' + file_strings + ' ' + outdir.as_posix()], shell=True, check=True)
    new_files = [outdir / f.name for f in files]
    return new_files


def write_atmos(ystart, mstart, ens, work_dir, lat_slice, lon_slice):
    out_dir = work_dir / f'{ystart}-{mstart:02d}-e{ens:02d}'
    if not out_dir.is_dir():
        # Read mask for flooding
        static = xarray.open_dataset('/work/acr/spear/atmos.static.nc')
        is_ocean = np.invert(static.land_mask.astype('bool'))

        print('archive -> vftmp')
        extracted_files = extract_spear_atmos(ystart, mstart, ens)

        print('pad and save')
        tmpdir = Path(os.environ['TMPDIR']) / 'atmos_raw' / f'{ystart}-{mstart:02d}-e{ens:02d}'
        tmpdir.mkdir(exist_ok=True, parents=True)
        for f in extracted_files:
            print('    ' + str(f))
            #open
            ds = (
                xarray.open_dataset(f)
                .sel(lat=lat_slice, lon=lon_slice)
            )
            # Need to mask just the variable of interest and not the
            # coordinate/metadata variables 
            main_var = [x for x in ds.data_vars if len(ds[x].dims)==3][0]
            ds[main_var] = ds[main_var].where(is_ocean)
            padded = pad_ds(ds)
            fout = tmpdir / f.name
            write_ds(padded, fout)
            # cdo doesn't like if the input is also the output here
            subprocess.run([f'cdo -O replace {fout} -setmisstodis,3 -selvar,{main_var} {fout} {fout}.new'], shell=True, check=True)
            # Rename the file generated by cdo to the output file 
            fout.with_suffix(fout.suffix + '.new').rename(fout)

        print('vftmp -> work')
        out_dir.mkdir()
        subprocess.run([f'gcp {tmpdir}/atmos*.nc {out_dir}'], shell=True, check=True)
    else:
        print(f'Already found data for {out_dir.as_posix()}')


if __name__ == '__main__':
    import argparse
    from yaml import safe_load
    parser = argparse.ArgumentParser()
    parser.add_argument('-y', '--year', type=int)
    parser.add_argument('-m', '--month', type=int)
    parser.add_argument('-e', '--ensemble', type=int)
    parser.add_argument('-c', '--config', default=None)
    args = parser.parse_args()
    if args.config is not None:
        with open(args.config, 'r') as file: 
            config = safe_load(file)
            # Note conversion from [-180, 180] to [0, 360]
            xslice = slice(config['domain']['west_lon'] % 360, config['domain']['east_lon'] % 360)
            yslice = slice(config['domain']['south_lat'], config['domain']['north_lat'])
            work_dir = Path(config['filesystem']['model_input_data']) / 'atmos'
            work_dir.mkdir(exist_ok=True)
    else:
        xslice = yslice = slice(None, None)
        import getpass
        work_dir = Path('/work/' / getpass.getuser())
    write_atmos(args.year, args.month, args.ensemble, work_dir, yslice, xslice)
    

