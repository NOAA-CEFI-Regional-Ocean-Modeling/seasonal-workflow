import numpy as np
import os
from pathlib import Path
import subprocess
import xarray


from spear_utils import extract_spear, pad_ds, write_ds


def write_atmos(ystart, mstart, ens):
    work_dir = Path('/work') / 'acr' / 'mom6' / 'nwa12' / 'forecast_input_flooded' / f'{ystart}-{mstart:02d}-e{ens:02d}'
    if not work_dir.is_dir():
        # Read mask for flooding
        static = xarray.open_dataset('/work/acr/spear/atmos.static.nc')
        is_ocean = np.invert(static.land_mask.astype('bool'))

        print('archive -> vftmp')
        extracted_files = extract_spear('atmos', ystart, mstart, ens)

        print('pad and save')
        tmpdir = Path(os.environ['TMPDIR']) / 'atmos_raw' / f'{ystart}-{mstart:02d}-e{ens:02d}'
        tmpdir.mkdir(exist_ok=True, parents=True)
        for f in extracted_files:
            print('    ' + str(f))
            #open
            ds = (
                xarray.open_dataset(f)
                .sel(lat=slice(0, 60), lon=slice(360-105, 360-30))
            )
            # Need to mask just the variable of interest and not the
            # coordinate/metadata variables 
            main_var = [x for x in ds.data_vars if len(ds[x].dims)==3][0]
            ds[main_var] = ds[main_var].where(is_ocean)
            padded = pad_ds(ds)
            fout = tmpdir / f.name
            write_ds(padded, fout)
            # cdo doesn't like if the input is also the output here
            subprocess.run([f'cdo -O replace {fout} -setmisstodis,3 -selvar,{main_var} {fout} {fout}.new'], shell=True, check=True)
            # Rename the file generated by cdo to the output file 
            fout.with_suffix(fout.suffix + '.new').rename(fout)


        print('vftmp -> work')
        work_dir.mkdir(exist_ok=True, parents=True)
        subprocess.run([f'gcp {tmpdir}/atmos*.nc {work_dir}'], shell=True, check=True)


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('ystart', type=int)
    parser.add_argument('mstart', type=int)
    parser.add_argument('ens', type=int)
    args = parser.parse_args()
    write_atmos(args.ystart, args.mstart, args.ens)
    

